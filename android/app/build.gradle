apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

// Path to your project root
def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    // Correctly set entryFile from Expo
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())

    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())

    bundleCommand = "export:embed"
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()

    autolinkLibrariesWithApp()
}

// Optional if you're using Hermes
def hermesEnabled = (findProperty('expo.jsEngine') ?: "hermes") == "hermes"
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    namespace 'com.rohitkumar62.smdnd'
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId 'com.rohitkumar62.smdnd'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }

    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Dynamic packaging options from gradle.properties
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",").collect { it.trim() } - ""
    if (options.size() > 0) {
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // React Native core
    implementation("com.facebook.react:react-android")

    // Hermes or JSC
    if (hermesEnabled) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Optional image support
    def frescoVersion = (expoLibs?.versions?.fresco?.get() ?: "2.5.0")
    if ((findProperty('expo.gif.enabled') ?: "") == "true") {
        implementation("com.facebook.fresco:animated-gif:$frescoVersion")
    }

    if ((findProperty('expo.webp.enabled') ?: "") == "true") {
        implementation("com.facebook.fresco:webpsupport:$frescoVersion")
        if ((findProperty('expo.webp.animated') ?: "") == "true") {
            implementation("com.facebook.fresco:animated-webp:$frescoVersion")
        }
    }
}
